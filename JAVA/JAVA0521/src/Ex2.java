
public class Ex2 {

	public static void main(String[] args) {
		/*
		 * 메서드(Method)
		 * - 작업의 최소 단위(= 작업을 실행하는 코드들의 모음)
		 * - 반드시 호출되어야만 사용할 수 있음
		 *   => 호출하는 메서드 : Caller, 호출 당하는 메서드 : Worker
		 * - 메서드 호출 시 전달하는 값을 파라미터(Parameter, 매개변수) 라고 하며,
		 *   => 파라미터는 없을 수도 있고, 여러개 일 수도 있다.
		 * - 메서드가 호출되면 작업을 수행한 후에 반드시 호출한 위치로 돌아감
		 *   => 메서드 작업 수행 후 돌아갈 때 가지고 가는 값을 리턴값이라고 함
		 * - main() 메서드는, 자바에서 유일하게 프로그램 실행 시 자동으로 호출되는 메서드
		 *   => 프로그램 시작점이라고 함
		 * 
		 * < 메서드 정의 기본 문법 >
		 * [제한자] 리턴타입 메서드명([파라미터...]) {
		 * 		// 메서드 호출 시 수행할 코드들...
		 * 		[return [리턴값];]
		 * }
		 * 
		 * < 메서드 형태 4가지 >
		 * 1. 파라미터도 없고, 리턴값도 없는 메서드
		 * 2. 파라미터는 없고, 리턴값만 있는 메서드
		 * 3. 파라미터만 있고, 리턴값은 없는 메서드
		 * 4. 파라미터도 있고, 리턴값도 있는 메서드
		 * 
		 */
		
		
		// Worker 메서드 호출
		// => 호출할 메서드의 이름을 사용하여 메서드 호출하고, 파라미터가 있을 경우 값 전달
		
		
		
		// 1. 파라미터도 없고, 리턴값도 없는 메서드 호출
		System.out.println("동생아! 불 좀 끄고 가라!");
		sister_1(); // sister_1() 메서드 호출
		// => 파라미터가 없으므로 소괄호() 안에 아무 데이터도 전달하지 않음
		System.out.println("동생이 불을 끄고 갔다!");
		
		System.out.println("--------------------------");
		
		
		// 2. 파라미터는 없고, 리턴값만 있는 메서드 호출
		System.out.println("동생아! 물 좀 떠다 도!");
		String result = sister_2(); // sister_2() 메서드 호출
		// => 파라미터가 없으므로 소괄호() 안에 아무 데이터도 전달하지 않음
		// => 리턴타입이 String 이므로 리턴받는 데이터를 변수에 저장하거나
		//    또는 출력문 등에 사용할 수 있다!
		System.out.println("동생이 가져다 준 것 : " + result); // 리턴받은 값을 변수에 저장한 경우
		// System.out.println("동생이 가져다 준 것 : " + sister_2()); // 리턴값을 바로 사용하는 경우
		
		System.out.println("--------------------------");
		
		
		// 3. 파라미터만 있고, 리턴값은 없는 메서드
		System.out.println("동생아! 돈 줄테니 과자 좀 사와라");
		// sister_3() // sister_3() 메서드 호출
		int money = 200;
		sister_3(money);
		System.out.println("--------------------------");

		// 4. 파라미터도 있고, 리턴값도 있는 메서드
		
		
		int num = 10;
		abs(num);
		
		
		
		
	} // main() 메서드 끝
	
	// 메서드 정의(= 호출당하는 메서드 = Worker 메서드)
	// 1. --------- 파라미터도 없고, 리턴값도 없는 메서드 정의 ---------
	// => 파라미터가 없으므로 메서드 선언부의 소괄호() 안에 아무것도 명시하지 않음
	// => 리턴값이 없으므로 리턴타입 부분에 void 를 명시(void = 리턴할 데이터가 없다는 특수 타입)
	public static void sister_1() {
		// sister_1() 메서드 호출 시 수행할 작업들을 기술
		System.out.println("동생 : 오빠가 불 끄라고 해서 불을 껐다!");
		return; // 리턴값이 없을 경우 return 만 써도 되고 생략가능
		// => 메서드 내에서 return문을 만나면 현재 수행이 종료되고 밑으로 내려감
		
		// public static void sister_1() 오류!
		// 리턴값이 없는 메서드를 출력문에서 호출하거나 변수에 대입 불가ㅡ능
	}
	
	
	// --------- 2. 파라미터는 없고, 리턴값만 있는 메서드 ---------
	// => 파라미터가 없으므로 메서드 선언부의 소괄호() 안에 아무것도 명시하지 않음
	// => 리턴값이 있으므로 리턴타입 부분에 리턴할 데이터의 타입을 명시(ex. 문자열 = String)
	//    => 반드시 메서드 종료 시점에서 리턴값을 return 문을 사용하여 명시해야함!
	public static String sister_2() {
		System.out.println("동생 : 오빠가 물 떠오라고 시켰다!");
		System.out.println("동생 : 물을 떠다 줬다!");
		
		// return 문을 사용하여 리턴타입 String 에 해당하는 데이터 리턴
//		return "물"; // 리터럴을 직접 리턴하거나
		
		// 변수를 사용하여 변수에 값을 저장한 뒤 리턴할 수 있음
		String str = "물";
		return str;
	}
	
	
	// --------- 3. 파라미터만 있고, 리턴값은 없는 메서드 ---------
	// => 파라미터가 있으므로 메서드 선언부 소괄호() 안에 전달받는 데이터 타입 선언
	// 리턴값이 없으므로 리턴타입 부분에 void 명시
	public static void sister_3(int sisterMoney) { // int형 데이터 1개 전달받아 sisterMoney 에 저장
		// => 전달받은 데이터가 저장된 파라미터를 사용하여 작업 수행
		System.out.println("동생 : 오빠가 과자 사먹으라고 준 돈 : " + sisterMoney + "원");
		sisterMoney -= 200;
		System.out.println("동생 : 과자 사먹고 남은 돈 " + sisterMoney + "원");
		// 리턴타입이 void 이므로 return 문을 생략하거나 return; 형태의 문장만 사용 가능
		return; // 메서드 내에서 return문을 만나면 현재 메서드를 종료하고 돌아감
	}
	
	
	// --------- 4. 파라미터도 있고, 리턴값도 있는 메서드 ---------
	// => 정수 num을 전달받아 절댓값을 리턴하는 메서드 abs() 정의
	
	public static int abs (int num) {
		if (num < 0) {
			num = -num;
		}
		return num;
	}
	
	
	
} // 클래스 끝



















